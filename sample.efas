assume fixed-point
    set  x test-data
    load x
    set  y test-data
    add  y 1
    load y
    div  z x y
    set b x
    set sp stack-start
    call expo
  jump main
: erfindung-text data [
__XX_XXXXXX__X_XXXXXX___XX_XXXXXX__XXXXXXXXXX_______________X_______________________________
__X__________X______XX__XX__________________________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__XX_XXXXXX__X__________XX_XXXX________XX___________________X_______________________________
__XX_________X__XX______X______________XX______X_XXXX__XXXX_X__X____X__X_XXXX__XXXXXX_______
__XX_________X____XX____X______________XX______X____X__X____X__X____X__X____X__X____X_______
__XX_________X______X___X______________XX______X____X__X____X__X____X__X____X__X____X_______
__XX_________X_______X__X______________XX______X____X__X____X__X____X__X____X__X____X_______
__XX_________X_______X__X______________________X____X__X____X__X____X__X____X__X____X_______
__XXXXXXXXX__X_______X__X__________XXXXXXXXXX__X____X__XXXXXX__XXXX_X__X____X__XXXX_X_______
____________________________________________________________________________________X_______
____________________________________________________________________________________X_______
____________________________________________________________________________________X_______
____________________________________________________________________________________X_______
X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_XX__XX__XX__XX__XX__XXXXXXXXXXXXXXXXXXXXXXXX_____XXXXXX_______
____________ ]
: main
       set sp stack-start
       set  x 92
       set  y 19
       set  z erfindung-text
       set  a 0 # OK, not too bad, a was for answer for io, so little change is
                # needed. 0 -> 000(mega size) first texture quadrant
       io   upload x y z a # upload sprite
       set  z a

       io   read random x
       mod  x x 228

       io   read random y
       mod  y y 221

       set  b 1
       set  c 1
       # stack pointer, points to an "initialized/in-use variable"
       # +---+        push +---+        pop +---+
       # | ? | [+3]        | c | <- sp      | ? | <- [ 0]  sp (was)
       # | ? | [+2]        | b |            | ? |    [-1]
       # | ? | [+1]        | a |            | ? |    [-2]
       # +---+ <- sp       +---+            +---+ <- sp
       # therefore push and pop offsets must be different
       jump start-program
: loop
       set x 1
       io wait  x
       io read random x
       and x x 8
       mod x x 8
       comp x    1
       skip x ==
           jump skip-clear
       io clear x
: skip-clear
       # semantic issue
       pop y x c b z

       io draw x y z # draw(x, y, z) = draw(x_pos, y_pos, sprite)

       io read controller a
       comp a    1
       skip a ==  # up is pressed
           set pc skip-press-up
       set c -1
       jump skip-press-down
: skip-press-up
       io read controller a
       comp a    2
       skip a ==  # down is pressed
           set pc skip-press-down
       set c 1
: skip-press-down
       io read controller a
       comp a    4 # left is pressed
       skip a ==
           set pc skip-press-left
       set b -1
       jump do-update
: skip-press-left
       io read controller a
       comp a    8 # right is pressed
       skip a ==
           set pc do-update
       set b 1
: do-update
       add  x b x # x = b + x
       add  y c y
: start-program
       #    4 3 2 1 0
       push z b c x y

       # x = x_pos (already set)
       set  y b  # y = x velocity
       set  z 228
       # a = check_bounds(x, y, z) x -> pos, y -> vel, z -> bounds

       # x = x_pos, y = x_vel -> a = new_x_vel
       call check-bounds

       save a sp -3 # I guess where x velocity is

       # load y_pos, y_vel
       load x sp
       load y sp -2
       set  z 221

       call check-bounds

       # save to y velocity
       save a sp -2
       jump loop

# this is a """function"""
assume integer
: check-bounds
    comp b x   0
    skip b   <
        jump check-next
    comp b y    -1
    skip b   ==
        jump check-next
    set a  1
    pop pc # returns
: check-next
    comp b x   z
    skip b   >
        jump check-exit
    comp b y    1
    skip b   ==
        jump check-exit
    set a -1
    pop pc # returns
: check-exit
    # do not change velocity
    set a  y
    pop pc

assume fp
: expo # e as base
    set a 1.0 # 1 + ...
    add a x # 1 + x + ...

    set y x
    mul y y # y = x^2
    mul b y 0.5
    add a b # ... + x^2/2 + ...

    set c 0
    jump expo-for-begin
: expo-for
    comp-int z c   6
    skip     z   <
        jump expo-for-exit
: expo-for-begin
    mul  y x # y := x^k
    set  b expo-table
    add  b c
    load b b
    mul  b y b
    add  a b # ... + x^k/k! + ...
    add  c 1
    jump expo-for
: expo-for-exit
    pop pc # returns
: expo-table data numbers [
    0.166666666   # 1/3! 0
    0.041666666   # 1/4! 1
    0.008333333   # 1/5! 2
    0.001388888   # 1/6! 3
    0.000198413   # 1/7! 4
    0.000024802 ] # 1/8! 5
: test-data data numbers [
    2.987654321
    1.123456789 ]
# setup stack somewhere, no convention
: stack-start data [ ________ ________ ________ ________ ]
