  set pc main
: erfindung-text data [
__XX_XXXXXX__X_XXXXXX___XX_XXXXXX__XXXXXXXXXX_______________X_______________________________
__X__________X______XX__XX__________________________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__XX_XXXXXX__X__________XX_XXXX________XX___________________X_______________________________
__XX_________X__XX______X______________XX______X_XXXX__XXXX_X__X____X__X_XXXX__XXXXXX_______
__XX_________X____XX____X______________XX______X____X__X____X__X____X__X____X__X____X_______
__XX_________X______X___X______________XX______X____X__X____X__X____X__X____X__X____X_______
__XX_________X_______X__X______________XX______X____X__X____X__X____X__X____X__X____X_______
__XX_________X_______X__X______________________X____X__X____X__X____X__X____X__X____X_______
__XXXXXXXXX__X_______X__X__________XXXXXXXXXX__X____X__XXXXXX__XXXX_X__X____X__XXXX_X_______
____________________________________________________________________________________X_______
____________________________________________________________________________________X_______
____________________________________________________________________________________X_______
____________________________________________________________________________________X_______
X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_XX__XX__XX__XX__XX__XXXXXXXXXXXXXXXXXXXXXXXX_____XXXXXX_______
____________ ]
: main set sp stack-start
       set  x 92
       set  y 19
       set  z erfindung-text
       call upload # upload sprite
       set  z a
       set  x 0
       set  y 0
       set  b 1 
       set  c 1
       # stack pointer, points to an "initialized variable"
       # +---+        push +---+        pop +---+ 
       # | ? | [+3]        | c | <- sp      | ? | <- [ 0]  sp (was)
       # | ? | [+2]        | b |            | ? |    [-1]
       # | ? | [+1]        | a |            | ? |    [-2]
       # +---+ <- sp       +---+            +---+ <- sp
       # therefore push and pop offsets must be different
       jump start-program
: loop call wait
       call clear

       pop y x c b z

       call draw  # draw(x, y, z) = draw(x_pos, y_pos, sprite)

       add  x b x # x = b + x
       add  y c y
       #    4 3 2 1 0
: start-program
       push z b c x y

       # x = x_pos (already set)
       set  y b  # y = x velocity
       set  z 400
       # a = check_bounds(x, y, z) x -> pos, y -> vel, z -> bounds 
       set  a  pc
       add  a  4
       save a sp
       jump check-bounds # x = x_pos, y = x_vel -> a = new_x_vel       
       sub  sp 1

       save a sp -3 # I guess where x velocity is
       
       # load y_pos, y_vel
       load x sp 
       load y sp -2
       set  z 300

       set a pc
       add a 4
       save a sp
       jump check-bounds
       sub  sp 1

       # save to y velocity
       save sp a -2
       jump loop
       
# this is a """function"""
assume integer
: check-bounds
    comp b x   0
    skip b   <
        jump check-next
    comp b y    -1
    skip b   ==
        jump check-next
    set a  1
    load pc sp # returns
: check-next
    comp b x   z
    skip b   >
        jump check-exit
    comp b y    1
    skip b   ==
        jump check-exit
    set a -1
    load pc sp # returns
: check-exit
    # do not change velocity
    set a  y
    load pc sp

# setup stack somewhere, no convention
: stack-start data [ ________ ________ ________ ________ ]
