  set pc main
: erfindung_text data [
__XX_XXXXXX__X_XXXXXX___XX_XXXXXX__XXXXXXXXXX_______________X_______________________________
__X__________X______XX__XX__________________________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__X__________X_X_____X__XX_____________XX___________________X_______________________________
__XX_XXXXXX__X__________XX_XXXX________XX___________________X_______________________________
__XX_________X__XX______X______________XX______X_XXXX__XXXX_X__X____X__X_XXXX__XXXXXX_______
__XX_________X____XX____X______________XX______X____X__X____X__X____X__X____X__X____X_______
__XX_________X______X___X______________XX______X____X__X____X__X____X__X____X__X____X_______
__XX_________X_______X__X______________XX______X____X__X____X__X____X__X____X__X____X_______
__XX_________X_______X__X______________________X____X__X____X__X____X__X____X__X____X_______
__XXXXXXXXX__X_______X__X__________XXXXXXXXXX__X____X__XXXXXX__XXXX_X__X____X__XXXX_X_______
____________________________________________________________________________________X_______
____________________________________________________________________________________X_______
____________________________________________________________________________________X_______
____________________________________________________________________________________X_______
X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_XX__XX__XX__XX__XX__XXXXXXXXXXXXXXXXXXXXXXXX_____XXXXXX_______
____________ ]
: main set sp bp_start
       set  x 92
       set  y 19
       set  z erfindung_text
       call upload # upload sprite
       call clear  # screen flush
       set  z a
       set  x 0
       set  y 0
       set  b 1 
       set  c 1
: loop call clear

       call draw  # draw(x, y, z) = draw(x_pos, y_pos, sprite)
       call wait
       add  x b x # x = b + x
       add  y c y

       save z sp 0
       save b sp 1
       save c sp 2
       save x sp 3
       save y sp 4
       add  sp 5

       set  y b  # set velocity, x_pos already set
       add  sp 1
       save pc sp
       set  pc check_x # x = x_pos, y = x_vel -> a = new_x_vel
       sub  sp 1
       save a sp -3 # I guess where x velocity is
       
       # load y_pos, y_vel
       load x sp 
       load y sp -2
       add  sp 1
       save pc sp
       set  pc check_y
       sub  sp 1
       save a sp -2

       load z sp -4
       load b sp -3
       load c sp -2
       load x sp -1
       load y sp 0
       sub  sp 5

       set pc loop
       
# this is a """function"""
: check_x
    comp b x   0
    skip b   <
        load pc check_x_next
    comp b y    1
    skip b   ==
        load pc check_x_next
    set a -1
    load pc sp
: check_x_next
    comp b x   100
    skip b   >
        load pc check_x_next
    comp b y     -1
    skip b   ==
        load pc check_x_exit
    set a -1
: check_x_exit load pc sp

# this is a """function"""
: check_y
    comp b x   0             # this code is redundent
    skip b   <               # however I have no praticle way 
        load pc check_y_next # of copy/pasting code in
    comp b y    1
    skip b   ==
        load pc check_y_next
    set a -1
    load pc sp
: check_y_next
    comp b x   100
    skip b   >
        load pc check_y_next
    comp b y     -1
    skip b   ==
        load pc check_y_exit
    set a -1
: check_y_exit load pc sp
# setup stack somewhere, no convention
: bp_start data [ ________ ________ ________ ________ ]
         # have to be careful not to up the cognitive load too much!
         #comp fp  x y a # explicit type needed!
         #comp int x y a # explicit integer
         #comp     x y a # defaults to integer
