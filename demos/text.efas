#!./erfindung
set sp stack-start
###############################################################################
#
#   Entry Point
#
###############################################################################
call upload-text

: draw-again
set x 120
set y 100
set z 4103
io draw  x y z

add x 8
set z 4100
io draw x y z

add x 8
set z 4107
io draw x y z

add x 8
io draw x y z

add x 8
set z 4110
io draw x y z

add y 8
call do-print
call do-array-print

io wait  a
io clear a

io read controller a
comp a    0
skip a ==  # any button is pressed
    set pc quit-program
jump draw-again

: quit-program
io halt x

###############################################################################
# upload alphabet
# no parameters, no returns
# Alphabet:
# 4096 4097 4098 4099 4100 4101 4102 4103 4104
# a    b    c    d    e    f    g    h    i
# 4105 4106 4107 4108 4109 4110 4111 4112 4113
# j    k    l    m    n    o    p    q    r
# 4114 4115 4116 4117 4118 4119 4120 4121 4122
# s    t    u    v    w    x    y    z    " "
###############################################################################
: upload-text
push x y z a
set x 8
set y 8

set z 4096
set a text-a

: start-upload-loop
io upload x y a z
add z 1
add a 2
comp c z    4123 # 4123
skip c   ==
    jump start-upload-loop
pop a z y x pc

###############################################################################
# parameters: x address of the string
#             y is the length (in words)
#             z          <- x position of the string
#             (on stack) <- y position of the string
###############################################################################
: draw-text
# unfortunately I haven't defined callee, caller saving convention...
# callee should save x, y, z -> (the ones it modifies)
# caller should save a, b, c -> (the ones it needs to keep)
push z
# grab y and push to stack (again)
load z sp -1
push z

: draw-text-begin
comp z y    0
skip z   ==
    jump draw-text-return

load a x
and  a 255
mod  a 27
set  b text-a
mul  a 2 # <- two words per letter
add  a b

: draw-text-return
pop z pc

###############################################################################
#
# Data: alphabet
#
###############################################################################
: text-a data [
# 01234567
  ________   # 0
  ___XXX__   # 1
  __X___X_   # 2
  __XXXXX_   # 3
  __X___X_   # 4
  __X___X_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-b data [
# 01234567
  ________   # 0
  __XXXX__   # 1
  __X___X_   # 2
  __XXXX__   # 3
  __X___X_   # 4
  __XXXX__   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-c data [
# 01234567
  ________   # 0
  ___XXXX_   # 1
  __X_____   # 2
  __X_____   # 3
  __X_____   # 4
  ___XXXX_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-d data [
# 01234567
  ________   # 0
  __XXXX__   # 1
  __X___X_   # 2
  __X___X_   # 3
  __X___X_   # 4
  __XXXX__   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-e data [
# 01234567
  ________   # 0
  __XXXXX_   # 1
  __X_____   # 2
  __XXXXX_   # 3
  __X_____   # 4
  __XXXXX_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-f data [
# 01234567
  ________   # 0
  __XXXXX_   # 1
  __X_____   # 2
  __XXXXX_   # 3
  __X_____   # 4
  __X_____   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-g data [
# 01234567
  ________   # 0
  ___XXX__   # 1
  __X_____   # 2
  __X__XX_   # 3
  __X___X_   # 4
  ___XXX__   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-h data [
# 01234567
  ________   # 0
  __X___X_   # 1
  __X___X_   # 2
  __XXXXX_   # 3
  __X___X_   # 4
  __X___X_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-i data [
# 01234567
  ________   # 0
  __XXXXX_   # 1
  ____X___   # 2
  ____X___   # 3
  ____X___   # 4
  __XXXXX_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-j data [
# 01234567
  ________   # 0
  __XXXXX_   # 1
  _____X__   # 2
  _____X__   # 3
  _____X__   # 4
  __XXXX__   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-k data [
# 01234567
  ________   # 0
  __X__X__   # 1
  __X_X___   # 2
  __XX____   # 3
  __X_X___   # 4
  __X__X__   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-l data [
# 01234567
  ________   # 0
  __X_____   # 1
  __X_____   # 2
  __X_____   # 3
  __X_____   # 4
  __XXXXX_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-m data [
# 01234567
  ________   # 0
  __X___X_   # 1
  __XX_XX_   # 2
  __X_X_X_   # 3
  __X___X_   # 4
  __X___X_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-n data [
# 01234567
  ________   # 0
  __X___X_   # 1
  __XX__X_   # 2
  __X_X_X_   # 3
  __X__XX_   # 4
  __X___X_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-o data [
# 01234567
  ________   # 0
  ___XXX__   # 1
  __X___X_   # 2
  __X___X_   # 3
  __X___X_   # 4
  ___XXX__   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-p data [
# 01234567
  ________   # 0
  ___XXX__   # 1
  __X___X_   # 2
  __XXXX__   # 3
  __X_____   # 4
  __X_____   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-q data [
# 01234567
  ________   # 0
  ___XXX__   # 1
  __X___X_   # 2
  __X_X_X_   # 3
  __X__X__   # 4
  ___XX_X_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-r data [
# 01234567
  ________   # 0
  __XXXX__   # 1
  __X___X_   # 2
  __XXXX__   # 3
  __X__X__   # 4
  __X___X_   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-s data [
# 01234567
  ________   # 0
  ___XXXX_   # 1
  __X_____   # 2
  ___XXX__   # 3
  ______X_   # 4
  __XXXX__   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-t data [
# 01234567
  ________   # 0
  __XXXXX_   # 1
  ____X___   # 2
  ____X___   # 3
  ____X___   # 4
  ____X___   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-u data [
# 01234567
  ________   # 0
  __X___X_   # 1
  __X___X_   # 2
  __X___X_   # 3
  __X___X_   # 4
  ___XXX__   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-v data [
# 01234567
  ________   # 0
  __X___X_   # 1
  __X___X_   # 2
  ___X_X__   # 3
  ___X_X__   # 4
  ____X___   # 5
  ________   # 6
  ________ ] # 7
# 01234567
: text-w data [
# 01234567
  ________   # 0
  __X___X_   # 1
  __X___X_   # 2
  __X_X_X_   # 3
  __XX_XX_   # 4
  __X___X_   # 5
  ________   # 6
  ________ ] # 7
: text-x data [
# 01234567
  ________   # 0
  __X___X_   # 1
  ___X_X__   # 2
  ____X___   # 3
  ___X_X__   # 4
  __X___X_   # 5
  ________   # 6
  ________ ] # 7
: text-y data [
# 01234567
  ________   # 0
  __X___X_   # 1
  ___X_X__   # 2
  ____X___   # 3
  ____X___   # 4
  ____X___   # 5
  ________   # 6
  ________ ] # 7
: text-z data [
# 01234567
  ________   # 0
  __XXXXX_   # 1
  _____X__   # 2
  ____X___   # 3
  ___X____   # 4
  __XXXXX_   # 5
  ________   # 6
  ________ ] # 7
: text-space data numbers [0 0]

#: stack-start data numbers [0]
: do-print
set x 20

add x 8
set z 4100
io draw x y z

add x 8
set z 4113
io draw x y z

add x 8
set z 4101
io draw x y z

add x 8
set z 4104
io draw x y z

add x 8
set z 4109
io draw x y z

add x 8
set z 4099
io draw x y z

add x 8
set z 4116
io draw x y z

add x 8
set z 4109
io draw x y z

add x 8
set z 4102
io draw x y z

add x 8
set z 4122
io draw x y z

add x 8
set z 4104
io draw x y z

add x 8
set z 4114
io draw x y z

add x 8
set z 4122
io draw x y z

add x 8
set z 4102
io draw x y z

add x 8
set z 4113
io draw x y z

add x 8
set z 4100
io draw x y z

add x 8
set z 4096
io draw x y z

add x 8
set z 4115
io draw x y z

pop pc

################################################################################

assume int
:string data numbers [
1 2 3 4 5 6 7 8 9
]
:string-end

################################################################################

:do-array-print
push x y z
set x  20
set y 220
set a string

:do-array-print-loop1-start
set b string-end
comp c a    b
skip c   ==
    jump do-array-print-loop1-end

load z a
add  z 4096
io draw x y z
add  x 8
add  a 1
jump do-array-print-loop1-start
:do-array-print-loop1-end
#io halt x
pop z y x pc

################################################################################

: stack-start data numbers [0]
