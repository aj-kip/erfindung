set sp stack-start
:back
assume integer
set x l00 # inst 1
set y l01 # inst 2
sub z y x # z -> one part of the jump table

io read random x # inst 4
call abs         # inst 5
set  x 0         # inst 6
mod  a a 22      # 0x16 -> 22
set  b a         # inst 8
mul  a z         # inst 9
add  a l00       # inst 10
set  x 100       # inst 11
set  y 200       # inst 12

add c 1 # inst 13
jump a  # inst 14

: l00
    add  z x y # inst 15
    jump end   # inst 16
: l01
    sub  z x y
    jump end
: l02
    and  z x y
    jump end
: l03
    xor  z x y
    jump end
: l04
    or  z x y
    jump end
: l05
    rot  z x y
    jump end
: l06
    mul  z x y
    jump end
: l07
    div  z x y
    jump end
: l08
    mod  z x y
    jump end
: l09
    comp z x y
    jump end
assume fp
: l0A
    add  z x y
    jump end
: l0B
    sub  z x y
    jump end
: l0C
    and  z x y
    jump end
: l0D
    xor  z x y
    jump end
: l0E
    or   z x y
    jump end
: l0F
    mul  z x y
    jump end
: l10
    div  z x y
    jump end
: l11
    mod  z x y
    jump end
: l12
    comp z x y
    jump end
# neither integer nor fp specific
: l13
    set z x
    jump end
: l14
    save z save-spot
    jump end
: l15
    load z save-spot
    jump end
:end
assume int

set  z 1000   # inst 17
mul  z 10000  # inst 18
comp z c    z # inst 19
skip z   ==   # inst 20
    jump back # inst 21
io halt x
:abs
push x
comp a x    0
skip a   >=
    mul x x -1
set a x
pop x pc
:save-spot   data numbers [0]
:stack-start data numbers [0]
